import { useState, FormEvent, ChangeEvent } from "react";
import {
    Box,
    Field,
    Input,
    Stack,
    //Fieldset,
    Button,
    Card,
} from "@chakra-ui/react";
import { useMutation } from "@apollo/client";
import { SIGNUP_USER } from "../graphql/mutations";
import Auth from "../utils/auth";

const SignForm = () => {
    const [userFormData, setUserFormData] = useState({
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        city: "",
        age: "",
        weight: "",
        height: "",
        gender: "",
    });
    // set state for form validation
    const [validated] = useState(false);
    // set state for alert
    const [showAlert, setShowAlert] = useState(false);

    const [addUser] = useMutation(ADD_USER);

    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {
        const { name, value } = event.target;
        setUserFormData({ ...userFormData, [name]: value });
    };


    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        const form = e.currentTarget;
        if (form.checkValidity() === false) {
            e.preventDefault();
            e.stopPropagation();
        }
        try {
            console.log(userFormData);
            const { data } = await addUser({
                variables: { input: { ...userFormData } },
            });

            Auth.login(data.addUser.token);
            alert("Signup successful!");
        } catch (err) {
            console.error(err);
        }
        // setUserFormData({

        //     email: '',
        //     password: '',
        //   });
        // };
    };

    return (

        <Box>
        </Box>

        < Box p = { 6} boxShadow = "lg" borderRadius = "md" maxW = "400px" mx = "auto" >

            <Card.Root
        maxW='sm'
    size = 'md'
    color = '#213A82'
    minH = '400px'
    margin = '5'
    boxShadow = 'lg'
    borderRadius = 'lg'
        >
        <Card.Header>
        <Card.Title textAlign='center' fontSize = '2xl' fontWeight = 'bold' >
            { " "}
    Login
        </Card.Title>
        </Card.Header>

        < form onSubmit = { handleSubmit } noValidate >
            <Card.Body>
            <Stack gap='6' maxW = 'md' css = {{ "--field-label-width": "96px" }
}>
    <Field.Root orientation='horizontal' required >
        <Field.Label>Email </Field.Label>
        < Input
name = 'email'
placeholder = 'me@example.com'
flex = '1'
value = { userFormData.email || "" }
onChange = { handleChange }
    />
    </Field.Root>
    </Card.Root>
    </Box>
  );
};










//     < Heading mb = { 4 } > Sign Up </Heading>
//         < form onSubmit = { handleSubmit } >
//             <Stack spacing={ 3 }>
//                 <FormControl isRequired >
//                 <FormLabel>First Name </FormLabel>
//                     < Input name = "firstName" value = { formState.firstName } onChange = { handleChange } />
//                         </FormControl>
//                         < FormControl isRequired >
//                             <FormLabel>Last Name </FormLabel>
//                                 < Input name = "lastName" value = { formState.lastName } onChange = { handleChange } />
//                                     </FormControl>
//                                     < FormControl isRequired >
//                                         <FormLabel>Email </FormLabel>
//                                         < Input type = "email" name = "email" value = { formState.email } onChange = { handleChange } />
//                                             </FormControl>
//                                             < FormControl isRequired >
//                                                 <FormLabel>Password </FormLabel>
//                                                 < Input type = "password" name = "password" value = { formState.password } onChange = { handleChange } />
//                                                     </FormControl>
//                                                     < FormControl >
//                                                     <FormLabel>City </FormLabel>
//                                                     < Input name = "city" value = { formState.city } onChange = { handleChange } />
//                                                         </FormControl>
//                                                         < FormControl >
//                                                         <FormLabel>Age </FormLabel>
//                                                         < Input type = "number" name = "age" value = { formState.age } onChange = { handleChange } />
//                                                             </FormControl>
//                                                             < FormControl >
//                                                             <FormLabel>Weight(kg) </FormLabel>
//                                                             < Input type = "number" name = "weight" value = { formState.weight } onChange = { handleChange } />
//                                                                 </FormControl>
//                                                                 < FormControl >
//                                                                 <FormLabel>Height(cm) </FormLabel>
//                                                                 < Input type = "number" name = "height" value = { formState.height } onChange = { handleChange } />
//                                                                     </FormControl>
//                                                                     < FormControl >
//                                                                     <FormLabel>Gender </FormLabel>
//                                                                     < Select name = "gender" value = { formState.gender } onChange = { handleChange } >
//                                                                         <option value="" > Select </option>
//                                                                             < option value = "Male" > Male </option>
//                                                                                 < option value = "Female" > Female </option>
//                                                                                     < option value = "Other" > Other </option>
//                                                                                         </Select>
//                                                                                         </FormControl>
//                                                                                         < Button type = "submit" colorScheme = "blue" isLoading = { loading } >
//                                                                                             Sign Up
//                                                                                                 </Button>
// { error && <Box color="red.500" > { error.message } </Box> }
// </Stack>
//     </form>
//     </Box>
//   );
// };

export default SignupForm;
